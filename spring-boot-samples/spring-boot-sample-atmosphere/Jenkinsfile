pipeline {
	//agent {
  //label 'java'
//}
	agent any
	environment {
		project_path = "spring-boot-samples/spring-boot-sample-atmosphere"
	}
	stages {
        	stage('compile,test and package') {
        		steps {
				dir(project_path) {
            				sh 'mvn clean package'
				}
            		}
        	}
        	stage('archival') {
        		steps {
				dir(project_path) {
            	 			archiveArtifacts 'target/*.jar'
            			}
			}
        	}
        	stage('unit test') {
        		steps {
				dir(project_path) {
		            		junit 'target/surefire-reports/*.xml'
            			}
			}
        	}
		stage('docker build') {
			steps{
			 sh label: '', script: 'docker build -t  sample_image .'
			sh label: '', script: 'docker login -u sreenagandla -p Welcome@0549'
			sh label: '', script: '''docker tag sample_image sreenagandla/sample_image
docker push sreenagandla/sample_image'''
			}
    		} 
		stage('deployment') {
  			steps {
    				
				sshagent(['k8s-machine']) {
                    		sh "scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ubuntu@ec2-13.234.75.178:/home/ubuntu/"
                    		script{
                        		try{
                            			sh "ssh ubuntu@ec2-13.234.75.178 kubectl apply -f ."
                        		}catch(error){
                            			sh "ssh ubuntu@ec2-13.234.75.178 kubectl create -f ."
                       				 }
                    			}
               			 }
 			}
		}
	}
	post { 
        	always { 
            		notify ('NOTIFY')
        	}
        	failure { 
        		notify ('FAIL')
        	}
        	success {
        		notify ('SUCCESS')
        	}
    	}
}
def notify(status){
    emailext (
      to: "devopshome19@gmail.com",
      subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} 	[${env.BUILD_NUMBER}]</a></p>""",
    	)
 }
